# # =====================================
# # Konfigurasi Umum (Berlaku untuk semua profil)
# # =====================================
# # Mengatur jenis database yang digunakan
# quarkus.datasource.db-kind=postgresql
# # Konfigurasi untuk Development (%dev)
# # %dev.quarkus.datasource.db-kind=postgresql
# # %dev.quarkus.datasource.username=quarkus_test
# # %dev.quarkus.datasource.password=quarkus_test
# # %dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/quarkus_test

# # # PENTING: Matikan Dev Services untuk database
# # %dev.quarkus.datasource.devservices.enabled=false

# # Mengatur agar Hibernate secara otomatis memperbarui skema database (membuat tabel, dll.)
# quarkus.hibernate-orm.database.generation=update

# quarkus.live-reload.instrumentation=true

# # =====================================
# # Konfigurasi Keamanan (JWT & JDBC Realm)
# # =====================================
# # Nama 'issuer' atau penerbit token JWT. Harus sama dengan yang ada di AuthResource.java
# mp.jwt.verify.issuer=https://yourdomain.com/issuer

# # Kueri SQL untuk mencari username, password, dan role dari tabel app_user
# quarkus.security.jdbc.principal-query.sql=SELECT password FROM app_user WHERE username = ?

# # Algoritma hash yang digunakan untuk password di database
# quarkus.security.jdbc.principal-query.password-mapper.algorithm=bcrypt

# # Encoding dari hash password yang disimpan
# quarkus.security.jdbc.principal-query.password-mapper.hash-encoding=hex


# # =====================================
# # Konfigurasi CORS (Untuk Frontend)
# # =====================================
# # Mengizinkan permintaan dari origin (domain) yang berbeda
# quarkus.http.cors=true
# # Secara spesifik mengizinkan permintaan dari server pengembangan Vue.js
# quarkus.http.cors.origins=http://localhost:5173
# # Mengizinkan header kustom 'X-History-ID' agar bisa dibaca oleh frontend
# quarkus.http.cors.exposed-headers=X-History-ID


# # =====================================
# # Konfigurasi Produksi (%prod)
# # =====================================
# # Mengambil URL koneksi database dari environment variable untuk keamanan
# %prod.quarkus.datasource.jdbc.url=${QUARKUS_DATASOURCE_JDBC_URL}

# # Mengatur level log menjadi INFO di mode produksi
# %prod.quarkus.log.level=INFO


# # =====================================
# # Konfigurasi Development (%dev)
# # =====================================
# # Mengatur nama database yang akan dibuat otomatis oleh Quarkus Dev Services
# %dev.quarkus.datasource.devservices.db-name=ba_history_db


# # =====================================
# # Konfigurasi Upload File
# # =====================================
# # Path untuk menyimpan file template yang diunggah
# # Ganti dengan path yang sesuai di mesin Anda. Pastikan folder ini ada.
# template.upload.path=D:\KULIAH\storage\ba-templates






# # =====================================
# # Konfigurasi Database (Untuk Docker Compose)
# # =====================================
# # Mengatur jenis database yang digunakan
# quarkus.datasource.db-kind=postgresql

# # --- KONFIGURASI UNTUK PROFIL DEVELOPMENT (%dev) ---
# # Hubungkan ke database yang berjalan dari Docker Compose
# %dev.quarkus.datasource.username=postgres
# %dev.quarkus.datasource.password=olan
# %dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/quarkus_test

# # PENTING: Matikan Dev Services untuk database karena kita sudah punya dari Docker
# %dev.quarkus.datasource.devservices.enabled=false

# # --- KONFIGURASI UNTUK PROFIL PRODUKSI (%prod) ---
# # Di produksi, biasanya diambil dari environment variable
# # Ini tetap sama, tidak perlu diubah.
# %prod.quarkus.datasource.jdbc.url=${QUARKUS_DATASOURCE_JDBC_URL}
# %prod.quarkus.datasource.username=${QUARKUS_DATASOURCE_USERNAME}
# %prod.quarkus.datasource.password=${QUARKUS_DATASOURCE_PASSWORD}


# # =====================================
# # Konfigurasi Hibernate
# # =====================================
# # Mengatur agar Hibernate secara otomatis memperbarui skema database (membuat tabel, dll.)
# # Ini sangat berguna saat development.
# quarkus.hibernate-orm.database.generation=update


# # =====================================
# # Konfigurasi Keamanan (JWT & JDBC Realm)
# # =====================================
# # Nama 'issuer' atau penerbit token JWT.
# mp.jwt.verify.issuer=https://yourdomain.com/issuer

# # Konfigurasi Elytron JDBC Security Realm (versi baru)
# quarkus.elytron.security.jdbc.principal-query.sql=SELECT password, role FROM app_user WHERE username = ?
# quarkus.elytron.security.jdbc.principal-query.password-mapper.algorithm=bcrypt

# # Mapping untuk mengambil role dari hasil query
# quarkus.elytron.security.jdbc.principal-query.attribute-mappings.0.index=2
# quarkus.elytron.security.jdbc.principal-query.attribute-mappings.0.to=groups


# # =====================================
# # Konfigurasi Upload File
# # =====================================
# # Path untuk menyimpan file template yang diunggah.
# # Ganti dengan path absolut yang valid di mesin Anda.
# # Contoh Windows: template.upload.path=D:/storage/ba-templates/
# # Contoh Linux/macOS:
# template.upload.path=D:\KULIAH\storage\ba-templates


# # =====================================
# # Konfigurasi CORS (Untuk Frontend)
# # =====================================
# # Mengizinkan permintaan dari origin (domain) yang berbeda
# quarkus.http.cors=true
# # Secara spesifik mengizinkan permintaan dari server pengembangan Vue.js
# quarkus.http.cors.origins=http://localhost:5173
# # Mengizinkan header kustom 'X-History-ID' agar bisa dibaca oleh frontend
# quarkus.http.cors.exposed-headers=X-History-ID


# # =====================================
# # Konfigurasi Lainnya
# # =====================================
# quarkus.live-reload.instrumentation=true
# %prod.quarkus.log.level=INFO


# =====================================
# Konfigurasi Database (Menggunakan Quarkus Dev Services)
# =====================================
# Cukup definisikan jenis database. Quarkus akan mengurus sisanya.
quarkus.datasource.db-kind=postgresql

# (Opsional) Beri nama pada database yang dibuat Dev Services agar mudah dikenali
%dev.quarkus.datasource.devservices.db-name=ba_dev_db
# Konfigurasi eksplisit untuk username, password, dan url tidak diperlukan lagi untuk dev.
# Quarkus Dev Services akan membuatnya secara otomatis.

# =====================================
# Konfigurasi Hibernate
# =====================================
quarkus.hibernate-orm.database.generation=drop-and-create


quarkus.hibernate-orm.sql-load-script=import.sql

# =====================================
# Konfigurasi Keamanan (JWT & JDBC Realm)
# =====================================
mp.jwt.verify.issuer=https://yourdomain.com/issuer

quarkus.security.jdbc.realms.default.principal-query.sql=SELECT password, role FROM app_user WHERE username = ?
quarkus.security.jdbc.realms.default.principal-query.password-mapper.algorithm=bcrypt
quarkus.security.jdbc.realms.default.principal-query.attribute-mappings.0.index=2
quarkus.security.jdbc.realms.default.principal-query.attribute-mappings.0.to=groups

# =====================================
# Konfigurasi Upload File
# =====================================
template.upload.path=D:\KULIAH\storage\ba-templates

# =====================================
# Konfigurasi CORS (Untuk Frontend)
# =====================================
quarkus.http.cors=true
quarkus.http.cors.origins=http://localhost:5173
quarkus.http.cors.exposed-headers=X-History-ID

# =====================================
# Konfigurasi Produksi (Biarkan untuk nanti)
# =====================================
%prod.quarkus.datasource.jdbc.url=${QUARKUS_DATASOURCE_JDBC_URL}
%prod.quarkus.datasource.username=${QUARKUS_DATASOURCE_USERNAME}
%prod.quarkus.datasource.password=${QUARKUS_DATASOURCE_PASSWORD}